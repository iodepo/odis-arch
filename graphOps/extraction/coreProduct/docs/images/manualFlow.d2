direction: right

title: {
  label: ODIS Arch Flow
  near: bottom-center
  shape: text
  style.font-size: 40
  style.underline: true
}

p: Source {
    oc: OceanCat
    pp: Partner Platforms
    oc ->pp
}

os: Sink (object store) \n Data Lake {
    s: Summoned Data Graphs
    rg: Release Graphs
    prod: Data Products L1 {
        mdp: Master Data Product
        r: Validation reports
    }

l2: Data Products L2 {
       gpk: OIH GeoPackage
    }

    prod.mdp -> l2.gpk
}

ds: Services {
    ts: triplestore
    solr: Solr Search
    geoapi: GeoAPI \n pygeoapi
    gql: GraphQL
}

# Credit Flow
z: Zenodo
os.rg -> z: via rgZenodoPublisher.py
os.prod -> z: via rgZenodoPublisher.py
p.pp <- z:  Credit
p.pp <- os.prod.r: In person  or email
z <- cust: Citation


# Graph ops and product generation
p -> os.s : via cliGleaner.py { style: { font-size: 36 } }
os.rg -> ds.ts : via cliNabu.py { style: { font-size: 36 }  }
os.s -> os.rg : via cliNabu.py { style: { font-size: 36 }  }
os.rg -> os.prod.mdp: via mdp.py { style: { font-size: 36 }  }
os.prod.mdp -> ds.solr: via mdp2solr.py { style: { font-size: 36 }  }
os.rg -> os.prod.r: via rgValidation.py


cust: Engagemnet {

    # Advocate 
    ux: User Experience {
        exp: Data Exploring
        ui: ODIS Search
        d: Dashboard
        vr: Validation Reports
    }

    # Assessment 
    ass: Assessment \n State of Ocean Data {
        graph: Graph Analysis
        lin: Lineage
        geo: GeoSpatial
    }

    # Engagement 
    eng: Engagement {
        wis: WIS2
        wesr: WESR
    }

}

# Advocate Flow
ds.ts -> cust.ux.exp: SPARQL and/or GraphQL
os.prod.r -> cust.ux.d: DuckDB
os.prod.r -> cust.ux.vr: SHACL+SPARQL, OpenRefine
os.prod.mdp -> cust.ux.d: DuckDB
ds.solr -> cust.ux.ui: via standard Solr API\n plus schema

os.l2.gpk -> cust.ass.geo

os.l2.gpk -> ds.geoapi


# Assessment Flow
os.rg -> cust.ass.graph: Network Analysis
os.prod -> cust.ass.graph: Network Analysis \n via \n SPARQL, OpenRefine, DuckDB, Python

# Engagement Flow
os.prod.mdp -> cust.eng.wis: via mdp2wis2.py
os.prod.mdp -> cust.eng.wesr


scenarios: {
  user: {

   title.lable: User Only


  }
}
